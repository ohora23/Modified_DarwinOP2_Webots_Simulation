/*
 * Copyright 1996-2018 Cyberbotics Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by gencpp from file webots_ros/RadarTarget.msg
// DO NOT EDIT!

#ifndef WEBOTS_ROS_MESSAGE_RADARTARGET_H
#define WEBOTS_ROS_MESSAGE_RADARTARGET_H

#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace webots_ros
{
template <class ContainerAllocator>
struct RadarTarget_
{
  typedef RadarTarget_<ContainerAllocator> Type;

  RadarTarget_()
    : header()
    , distance(0.0)
    , receivedPower(0.0)
    , speed(0.0)
    , azimuth(0.0)  {
    }
  RadarTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance(0.0)
    , receivedPower(0.0)
    , speed(0.0)
    , azimuth(0.0)  {
    }

   typedef ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double  _distance_type;
  _distance_type distance;

   typedef double  _receivedPower_type;
  _receivedPower_type receivedPower;

   typedef double  _speed_type;
  _speed_type speed;

   typedef double  _azimuth_type;
  _azimuth_type azimuth;



  typedef boost::shared_ptr< ::webots_ros::RadarTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::webots_ros::RadarTarget_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTarget_

typedef ::webots_ros::RadarTarget_<std::allocator<void> > RadarTarget;

typedef boost::shared_ptr< ::webots_ros::RadarTarget > RadarTargetPtr;
typedef boost::shared_ptr< ::webots_ros::RadarTarget const> RadarTargetConstPtr;

// constants requiring out of line definition

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::webots_ros::RadarTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::webots_ros::RadarTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace webots_ros

namespace ros
{
namespace message_traits
{

// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/groovy/share/std_msgs/msg'], 'webots_ros': ['/home/simon/my_Webots_Projects/controllers/ros_controller/catkin_ws/src/webots_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']

template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::RadarTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::webots_ros::RadarTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::RadarTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::webots_ros::RadarTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::RadarTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::webots_ros::RadarTarget_<ContainerAllocator> const>
  : FalseType
  { };

template<class ContainerAllocator>
struct MD5Sum< ::webots_ros::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39dda2b01810c27987f6a767b1a78c1c";
  }

  static const char* value(const ::webots_ros::RadarTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0147e4f36cba5cdaULL;
  static const uint64_t static_value2 = 0x7fa39c089e493413ULL;
};

template<class ContainerAllocator>
struct DataType< ::webots_ros::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "webots_ros/RadarTarget";
  }

  static const char* value(const ::webots_ros::RadarTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::webots_ros::RadarTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 distance\n\
float64 receivedPower\n\
float64 speed\n\
float64 azimuth\n\\n\
\n\
";
  }

  static const char* value(const ::webots_ros::RadarTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::webots_ros::RadarTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance);
      stream.next(m.receivedPower);
      stream.next(m.speed);
      stream.next(m.azimuth);

    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::webots_ros::RadarTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::webots_ros::RadarTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "receivedPower: ";
    Printer<double>::stream(s, indent + "  ", v.receivedPower);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);

  }
};

} // namespace message_operations
} // namespace ros

#endif // WEBOTS_ROS_MESSAGE_RADARTARGET_H
